const expect = require('expect');
const request = require('supertest');
const { ObjectID } = require('mongodb');

const { app } = require('./../server');
const { Todo } = require('./../models/todo');

// beforeEach((done) => {
//     // wip all todos
//     Todo.remove({}).then(() => done());
// });

// beforeEach((done) => {
//     Todo.insertMany(todos).then(() => done());
// });

// describe('POST /todos', () => {
//     it('should create a new todo', (done) => {
//         let text = 'test todo text';
//         request(app)
//             .post('/todos')
//             .send({ text })
//             .expect(200)
//             .expect((res) => {
//                 expect(res.body.text).toBe(text);
//             })
//             .end((err, res) => {
//                 if (err) {
//                     return done(err);
//                 }
//                 Todo.find({ text }).then((todos) => {
//                     expect(todos.length).toBe(1);
//                     expect(todos[0].text).toBe(text);
//                     done();
//                 }).catch((e) => done(e));
//             })
//     });

//     it('should not create todo with invalid body data', (done) => {
//         request(app)
//             .post('/todos')
//             .send({})
//             .expect(400)
//             .end((err, res) => {
//                 if (err) {
//                     return done(err);
//                 }
//                 Todo.find().then((todos) => {
//                     expect(todos.length).toBe(2);
//                     done();
//                 }).catch((e) => done(e));
//             });
//     });

// });

// describe('GET /todos', () => {
//     it('should get all todos', (done) => {
//         request(app)
//             .get('/todos')
//             .expect(200)
//             .expect((res) => {
//                 expect(res.body.todos.length).toBe(2);
//             })
//             .end(done);
//     });
// });

// describe('GET /todos/:id', () => {
//     it('should return todo doc', (done) => {
//         request(app)
//             .get(`/todos/${todos[0]._id.toHexString()}`)
//             .expect(200)
//             .expect((res) => {
//                 expect(res.body.todo.text).toBe(todos[0].text);
//             })
//             .end(done);
//     });

//     it('should return 404 if todo not found', (done) => {
//         const id = new ObjectID().toHexString();
//         request(app)
//             .get(`/todos/${id}`)
//             .expect(404)
//             .end(done);
//     });

//     it('should return 404 for non object ids', (done) => {
//         request(app)
//             .get('/todos/1234')
//             .expect(404)
//             .end(done);
//     });

// });

// describe('DELETE /todos/:id', () => {
//     it('should remove todo', (done) => {
//         const hexId = todos[1]._id.toHexString();
//         request(app)
//             .delete(`/todos/${hexId}`)
//             .expect(200)
//             .expect((res) => {
//                 expect(res.body.todo._id).toBe(hexId);
//             })
//             .end((err, res) => {
//                 if (err) {
//                     return done(err);
//                 }
//                 Todo.findById(hexId).then((todos) => {
//                     // toNotExist does not work any more
//                     expect(todos).toBeNull();
//                     done();
//                 }).catch((e) => done(e));
//             });
//     });

//     it('should return 404 if todo not found', (done) => {
//         const hexId = new ObjectID().toHexString();
//         request(app)
//             .delete(`/todos/${hexId}`)
//             .expect(404)
//             .end(done);
//     });

//     it('should return 404 if object is invalid', (done) => {
//         request(app)
//             .get('/todos/1234')
//             .expect(404)
//             .end(done);
//     });
// })

// describe('PATCH /todos/:id', () => {
//     it('should update the todo', (done) => {
//         const id = todos[0]._id.toHexString();
//         request(app)
//             .patch(`/todos/${id}`)
//             .send({ text: 'New text', completed: true })
//             .expect(200)
//             .expect((res) => {
//                 expect(res.body.todo.text).toBe('New text');
//                 expect(res.body.todo.completed).toBe(true);
//                 expect(typeof res.body.todo.completedAt).toBe('number');
//             })
//             .end(done);

//     });

//     it('should clear completedAt when todo is not completed', (done) => {
//         const id = todos[1]._id.toHexString();
//         request(app)
//             .patch(`/todos/${id}`)
//             .send({ text: 'New text', completed: false })
//             .expect(200)
//             .expect((res) => {
//                 expect(res.body.todo.text).toBe('New text');
//                 expect(res.body.todo.completed).toBe(false);
//                 expect(res.body.todo.completedAt).toBeNull();
//             })
//             .end(done);
//     });
// });

  
  